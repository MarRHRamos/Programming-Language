#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

struct Regla {
    string simbolo_izquierdo;
    vector<string> simbolo_derecho;
};

vector<string> generar_oraciones(vector<Regla> reglas, string simbolo_inicial) {
    vector<string> oraciones;
    vector<string> palabras;

    palabras.push_back(simbolo_inicial);

    while (!palabras.empty()) {
        string palabra = palabras.back();
        palabras.pop_back();

        bool regla_encontrada = false;
        for (const Regla& regla : reglas) {
            if (regla.simbolo_izquierdo == palabra) {
                for (const string& simbolo : regla.simbolo_derecho) {
                    string nueva_palabra = palabra;
                    nueva_palabra.replace(nueva_palabra.find(regla.simbolo_izquierdo), regla.simbolo_izquierdo.length(), simbolo);
                    palabras.push_back(nueva_palabra);
                }
                regla_encontrada = true;
                break;
            }
        }

        if (!regla_encontrada) {
            oraciones.push_back(palabra);
        }
    }

    return oraciones;
}

int main() {
    vector<Regla> reglas = {
        {"vo", {"(vo)"}},
        {"vo", {"a + v1"}},
        {"v1", {"a + v2"}},
        {"v2", {"a + v2"}},
        {"v2", {"a"}}
    };

    vector<string> oraciones = generar_oraciones(reglas, "vo");

    cout << "Oraciones sintÃ¡cticamente correctas:\n";
    for (const string& oracion : oraciones) {
        cout << oracion << endl;
    }

    return 0;
}
